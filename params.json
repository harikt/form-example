{"name":"Standalone Form for PHP","tagline":"Standalone Form for PHP with Aura.Input, Aura.View Helpers","body":"Standalone Form for PHP\r\n=======================\r\n\r\nThe minimal stuff you need to create and validate your form. If you want to\r\nuse a powerful validation and filtering use something like [Aura.Filter](http://github.com/auraphp/Aura.Filter) \r\nor use your favourite component that does the filtering/validation. You can see how you can integrate Aura.Filter in the master branch.\r\n\r\nThe `composer.json` file\r\n\r\n```php\r\n{\r\n    \"require\": {\r\n        \"aura/input\": \"1.0.0\",\r\n        \"aura/view\": \"1.1.2\"\r\n    }\r\n}\r\n```\r\n\r\nThe page which you need to bring the form.\r\n\r\n```php\r\n<?php\r\nuse Aura\\Input\\Builder;\r\nuse Aura\\Input\\Filter;\r\nuse Aura\\Input\\Form;\r\n\r\n$loader = require __DIR__ . '/vendor/autoload.php';\r\n\r\n$helper = new Aura\\View\\HelperLocator([\r\n    'field' => function () { \r\n        return new Aura\\View\\Helper\\Form\\Field(\r\n            require dirname(__DIR__) . '/vendor/aura/view/scripts/field_registry.php'\r\n        ); \r\n    },\r\n    'input' => function () { return new Aura\\View\\Helper\\Form\\Input(\r\n            require dirname(__DIR__) . '/vendor/aura/view/scripts/input_registry.php'\r\n        ); \r\n    },\r\n    'radios' => function () { \r\n        return new Aura\\View\\Helper\\Form\\Radios(\r\n            new Aura\\View\\Helper\\Form\\Input\\Checked\r\n        ); \r\n    },\r\n    'repeat' => function () { \r\n        return new Aura\\View\\Helper\\Form\\Repeat(\r\n            require dirname(__DIR__) . '/vendor/aura/view/scripts/repeat_registry.php'\r\n        ); \r\n    },\r\n    'select' => function () { \r\n        return new Aura\\View\\Helper\\Form\\Select; \r\n    },\r\n    'textarea' => function () { \r\n         return new Aura\\View\\Helper\\Form\\Textarea; \r\n    },\r\n]);\r\n```\r\n\r\n## Creating your Form Class\r\n\r\nTo create your form extend the class with `Aura\\Input\\Form` . Here is an example of contact form\r\nwith fields `name`, `email`, `url` and `message` in it.\r\n\r\n```php\r\n<?php\r\n/*\r\n * Contact Form class\r\n */\r\nuse Aura\\Input\\Form;\r\n\r\nclass ContactForm extends Form\r\n{\r\n    public function init()\r\n    {\r\n        $this->setField('name')\r\n            ->setAttribs([\r\n                'id' => 'name',\r\n                'size' => 20,\r\n                'maxlength' => 20,\r\n            ]);\r\n        $this->setField('email')\r\n            ->setAttribs([\r\n                'size' => 20,\r\n                'maxlength' => 20,\r\n            ]);\r\n        $this->setField('url')\r\n            ->setAttribs([\r\n                'size' => 20,\r\n                'maxlength' => 20,\r\n            ]);\r\n        $this->setField('message', 'textarea')\r\n            ->setAttribs([\r\n                'cols' => 40,\r\n                'rows' => 5,\r\n            ]);\r\n        $this->setField('submit', 'submit')\r\n            ->setAttribs(['value' => 'send']);\r\n            \r\n        // Get the filter object passed to the form, and \r\n        // depending upon the filter/validator add the rules.\r\n        $filter = $this->getFilter();\r\n        \r\n        $filter->setRule(\r\n            'name',\r\n            'Name must be alphabetic only.',\r\n            function ($value) {\r\n                return ctype_alpha($value);\r\n            }\r\n        );\r\n\r\n        $filter->setRule(\r\n            'email', \r\n            'Enter a valid email address', \r\n            function ($value) {\r\n                return filter_var($value, FILTER_VALIDATE_EMAIL);\r\n            }\r\n        );\r\n\r\n        $filter->setRule(\r\n            'url', \r\n            'Enter a valid url', \r\n            function ($value) {\r\n                return filter_var($value, FILTER_VALIDATE_URL);\r\n            }\r\n        );\r\n\r\n        $filter->setRule(\r\n            'message', \r\n            'Message should be more than 7 characters', \r\n            function ($value) {\r\n                if (strlen($value) > 7) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nNow create the object of `Form` passing the `Aura\\Input\\Builder` object and an object \r\nof type `Aura\\Input\\FilterInterface`. As we are using the base filter of Aura.Input\r\npass `Aura\\Input\\Filter`.\r\n\r\n```php\r\n<?php\r\nuse Aura\\Input\\Builder;\r\nuse Aura\\Input\\Filter;\r\n\r\n$form = new ContactForm(new Builder(), new Filter());\r\n\r\nif ($_POST && $_POST['submit'] == 'send') {\r\n    $data = $_POST;\r\n    // Fill the fields with the value\r\n    $form->fill($data);\r\n    // Validate and filter data\r\n    if ($form->filter()) {\r\n        // success\r\n        echo \"Yes successfully validated and filtered\";\r\n        var_dump($data);\r\n        exit;\r\n    }\r\n}\r\n\r\n$field = $helper->get('field');\r\nfunction showFieldErrors($form, $name) {\r\n    $errors = $form->getMessages($name);\r\n    $str = '';\r\n    if ($errors) {\r\n        $str .= '<ul>';\r\n        foreach ($errors as $error) {\r\n            $str .= '<li>' . $error . '</li>';\r\n        }\r\n        $str .= '</ul>';\r\n    }\r\n    return $str;\r\n}\r\n?>\r\n```\r\n\r\nIn order to render a field, you can use `$field($form->get('name'))`.\r\n\r\n```php\r\n<html>\r\n<head>\r\n    <title>Aura Form, to make it standalone</title>\r\n</head>\r\n<body>\r\n    <form method=\"post\" action=\"\" enctype=\"multipart/form-data\" >\r\n        <table cellpadding=\"0\" cellspacing=\"0\">\r\n            <tr>\r\n                <td>Name : </td>\r\n                <td>\r\n                <?php\r\n                    echo $field($form->get('name'));\r\n                    echo showFieldErrors($form, 'name');\r\n                ?>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>Email : </td>\r\n                <td>\r\n                <?php\r\n                    echo $field($form->get('email'));\r\n                    echo showFieldErrors($form, 'email');\r\n                ?>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>Url : </td>\r\n                <td>\r\n                <?php\r\n                    echo $field($form->get('url'));\r\n                    echo showFieldErrors($form, 'url');\r\n                ?>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>Message : </td>\r\n                <td>\r\n                <?php\r\n                    echo $field($form->get('message'));\r\n                    echo showFieldErrors($form, 'message');\r\n                ?>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td colspan=\"2\">\r\n                <?php \r\n                echo $field($form->get('submit'));\r\n                ?>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </form>\r\n</body>\r\n</html>\r\n```","google":"UA-5998889-1","note":"Don't delete this file! It's used internally to help with page regeneration."}